#!/usr/bin/python3 -u
# coding: utf-8

"""
Script that looks for security issues on your system and notify you.

Should be run periodically using a systemd timer.
See /etc/systemd/system/auditor.{service,timer}
"""

import os
import sys
import json
from stat import S_ISDIR, S_ISREG, S_IWOTH, S_IXOTH, S_IRWXO
from typing import List, Tuple
from subprocess import CalledProcessError, run, check_output
import requests

def check_world_writable(top_folder: str, dangerous_files_detected: List[str]):
    """
    For now, only o+w permissions are considered dangerous.
    """

    directories = os.listdir(top_folder)

    # Not optimized since it will run at each recursion, but better for readability
    if top_folder == "/":
        directories.remove("proc")
        directories.remove("sys")
        directories.remove(".snapshots")

    for file in directories:
        fullpath = os.path.join(top_folder, file)
        mode = os.lstat(fullpath).st_mode

        if S_ISDIR(mode) and mode & S_IXOTH:
            # It's a traversable directory by "others", recurse into it
            # (reporting files in directories not traversable would be a false positive)
            check_world_writable(fullpath, dangerous_files_detected)

        elif S_ISREG(mode) and mode & S_IWOTH:
            # It's a regular file writable by "others", DANGEROUS
            dangerous_files_detected.append(fullpath)

def check_homes_permission() -> List[str]:
    """
    Check that NO permission is given to "others".
    """

    homes_with_wrong_perm = []
    home_folder = "/home"

    for user in os.listdir(home_folder):
        fullpath = os.path.join(home_folder, user)
        mode = os.stat(fullpath).st_mode

        if mode & S_IRWXO:
            homes_with_wrong_perm.append(fullpath)

    if os.stat("/root").st_mode & S_IRWXO:
        homes_with_wrong_perm.append("/root")

    return homes_with_wrong_perm

def check_docker() -> List[str]:
    """
    Make sure noone is in the docker group.
    Being in the docker group = being root
    """

    docker_users = []
    docker_line = None

    with open("/etc/group") as file:
        for line in file:
            if line.startswith("docker"):
                docker_line = line.strip()
                break

    if docker_line:
        tokens = docker_line.split(":")
        if tokens[-1] != "":
            docker_users = tokens[-1].split(",")

    return docker_users

def check_secure_boot() -> bool:
    """
    Returns True if secure boot is enabled, False otherwise.
    """

    sb_file = None

    for file in os.listdir("/sys/firmware/efi/efivars"):
        if file.startswith("SecureBoot-"):
            sb_file = f"/sys/firmware/efi/efivars/{file}"

    if sb_file is None:
        return False

    with open(sb_file, "rb") as stream:
        content = stream.read()
        return content[4] == 1
            

def vercmp(ver1, ver2) -> int:
    """
    Compare versions of pacman packages.
    """
    return int(check_output(["/usr/bin/vercmp", ver1, ver2]).decode())

def check_local_cves() -> List[Tuple[str, str]]:
    """
    Compare installed packages to the list of reported CVEs by ArchLinux.
    """

    local_cves = []
    cves_to_ignore = []

    try:
        with open("/etc/cve-ignore.list", "r") as file:
            for line in file:
                cve_to_ignore = line
                comment_index = line.find("#")

                if comment_index != -1:
                    cve_to_ignore = cve_to_ignore[:comment_index]

                cve_to_ignore = cve_to_ignore.strip()

                if cve_to_ignore:
                    cves_to_ignore.append(cve_to_ignore)
    except FileNotFoundError:
        pass

    print("CVEs ignore list:", cves_to_ignore)

    output = check_output(["/usr/bin/pacman", "-Qn"]).decode().split("\n")

    installed_packages = {}
    for line in output:
        if not line:
            continue

        tokens = line.split()

        if len(tokens) != 2:
            raise ValueError(f"Unexpected entry, please report this bug: {line}")

        installed_packages[tokens[0]] = tokens[1]

    content = requests.get("https://security.archlinux.org/issues/all.json")

    for entry in content.json():
        impacted_packages = entry["packages"]
        affected_version = entry["affected"]
        fixed_in_version = entry["fixed"]

        cves = entry["issues"]

        for cve in cves_to_ignore:
            if cve in cves:
                cves.remove(cve)

        if not cves:
            continue

        if len(cves) > 5:
            cves = cves[:4] + ["and more..."] 

        cves = " ".join(cves)

        for package in impacted_packages:
            if package not in installed_packages:
                continue

            if fixed_in_version:
                if vercmp(fixed_in_version, installed_packages[package]) > 0:
                    local_cves.append((package, cves))

            else: # fixed_in_version unavailable, we don't know when it was fixed, but we know the affected version(s?)
                if installed_packages[package] == affected_version:
                    local_cves.append((package, cves))

    return local_cves

def report(title: str, body: str, urgency: str = "critical"):
    print("NOTIFY", json.dumps({"urgency": urgency, "title": title, "body": body}))

def main() -> None:

    if os.geteuid() != 0:
        print("This script must be run as root.")
        sys.exit(1)

    report("AUDIT IN PROGRESS", "The auditor script is looking for security issues...", urgency="normal")

    print("Checking home folders permissions...")
    too_permissive_homes_perm = check_homes_permission()

    if too_permissive_homes_perm:
        report("DANGEROUS PERMISSIONS DETECTED",
               "\nThe following home folders are at risk:\n\n" +
               "\n".join(too_permissive_homes_perm))

    print("Checking docker group...")
    people_in_docker_group = check_docker()

    if people_in_docker_group:
        report("DANGEROUS GROUP DETECTED",
               "\nThe following users are in the docker group, noone should be in that group:\n\n" +
               "\n".join(people_in_docker_group))

    print("Checking secure boot...")
    secure_boot_enabled = check_secure_boot()
    if not secure_boot_enabled:
        report("SECURE BOOT DISABLED", "Make sure to enable it in your BIOS")

    print("Checking local CVEs...")
    packages_with_cve = check_local_cves()

    if packages_with_cve:
        report("VULNERABLE PACKAGES DETECTED",
               "\nThe following packages are vulnerable:\n\n" +
               "\n\n".join([f"{p[0]}: {p[1]}" for p in packages_with_cve]) +
               "\n\nReview them and take action.\nAdd the CVE to /etc/cve-ignore.list if they are not relevant to you.")

    world_writables_files = []
    print("Checking world writable files...")
    check_world_writable("/", world_writables_files)

    if world_writables_files:
        report("DANGEROUS PERMISSIONS DETECTED",
               "\nAnyone can write to those files:\n\n" +
               "\n".join(world_writables_files))

    sys.exit(0)

if __name__ == "__main__":
    main()
